# -*- coding: utf-8 -*-
"""q_4_a_jazz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MmUggyA-vBLNTxn5EdiViDpIYCle94b0
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
#%cd /content/drive/MyDrive/SMA_A1/
# %cd /content/drive/MyDrive/Semester_3/SMA/

!pip install igraph

import igraph

g = igraph.read("jazz.net",format="pajek")

A = g.get_edgelist()

!pip install networkx
import networkx as nx

G = nx.Graph(A) 
print(G)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt

# %matplotlib inline

# visualize the graph
nx.draw(G, with_labels = True)

from datetime import datetime
start=datetime.now()
def edge_to_remove(graph):
  G_dict = nx.edge_betweenness_centrality(graph)
  edge = ()

  # extract the edge with highest edge betweenness centrality score
  for key, value in sorted(G_dict.items(), key=lambda item: item[1], reverse = True):
      edge = key
      break

  return edge

#algorithm for Girvan Newman
def girvan_newman(graph):
	# find number of connected components
	sg = nx.connected_components(graph)
	sg_count = nx.number_connected_components(graph)

	while(sg_count == 1):
		graph.remove_edge(edge_to_remove(graph)[0], edge_to_remove(graph)[1])
		sg = nx.connected_components(graph)
		sg_count = nx.number_connected_components(graph)

	return sg
# find communities in the graph
c = girvan_newman(G.copy())

# find the nodes forming the communities
node_groups = []

for i in c:
  node_groups.append(list(i))
print(node_groups)
# plot the communities
color_map = []
for node in G:
    if node in node_groups[0]:
        color_map.append('blue')
    else: 
        color_map.append('green')  

nx.draw(G, node_color=color_map, with_labels=True)
plt.show()
print(datetime.now()-start)

import statistics
set = [8.073329, 8.179925, 8.082026, 8.051079, 8.121099]
print(statistics.mean(set))